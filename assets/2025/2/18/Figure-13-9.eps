%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 474.000000 341.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 15.1 (Build 24B83) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 474 341
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 474 341
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Menlo-Regular
%!FontType1-1.0: Menlo-Regular 1.0000.2.0280
14 dict begin
/FontName /Menlo-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /O put
dup 34 /b put
dup 35 /j put
dup 36 /e put
dup 37 /c put
dup 38 /t put
dup 39 /period put
dup 40 /n put
dup 41 /w put
dup 42 /M put
dup 43 /a put
dup 44 /r put
dup 45 /k put
dup 46 /space put
dup 47 /S put
dup 48 /P put
dup 49 /o put
dup 50 /p put
dup 51 /d put
dup 52 /f put
dup 53 /W put
dup 54 /i put
dup 55 /B put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1143 1 index div -767 2 index div 1470 3 index div 2133 5 -1 roll div]cvx def
/sfnts [<

B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000D2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8000E2C2020456944B001602020457D691844B001602DB8000F2CB8000E2A2DB800102C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800112C4B535845441B2121592D0000020068FE96046805A400030007001FBC00040114000000060114B6010805830204002FC4D4EC310010D4ECD4EC301311211125211121680400FC73031BFCE5FE96070EF8F272062900000000010185000002E5019400030017B800082BBA00010000000B2B00BA00010002000B2B30310121112101850160FEA00194FE6C00000300A60000047105D500080011002000EDB800082BBA00090012000B2BBA0016000E000B2BB8000910B80000D0410500EA000E00FA000E00025D411B0019000E0029000E0039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E00D9000E000D5DBA0005000E0016111239B800052F410500EA000500FA000500025D411B00190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C9000500D90005000D5DB8001CDCBA00190012001C111239B80022DC00BA0002001F000B2BBA00120009000B2BBA000A0000000B2BBA00190000000A111239303101113332363534262303113332363534262325213216151406071E0115140429010171EFB0969EA8EFEB92838194FE4A01BAE5F8838393A7FEF6FEF9FE4602F1FDB57B8DBA89023EFE6670557164A6C6B5619E1416CFC8CBCF000100240000044705D0000C0067B800082BB8000D2FB8000E2FB8000D10B80000D0B800002FB8000E10B80005DCBA000200000005111239B80006DCB8000010B8000ADC00B800002FB800032FB800052FB8000B2FBA000200050000111239BA000700050000111239BA000A0005000011123930311321090121112311012301112324010E01020104010FBBFEF699FEF5BA05D0FD0A02F6FA300523FCF00310FADD000000020075FFE3045C05F0000B00170023401309970F039715960F991800320C36063212351810FCECFCEC310010E4F4EC10EE300110022322021110123332121310022322021110123332120389879A998787999A87D3F7FDFDF6F7FCFDF702E90149011AFEE6FEB7FEB8FEE601190149FE7AFE80017E018801870180FE800000000200C50000047505D500080013002B40180197





2B2B2B2B2B2B2B2B2B2B1D00
00>] def
/CharStrings 24 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/B 3 def
/M 4 def
/O 5 def
/P 6 def
/S 7 def
/W 8 def
/a 9 def
/b 10 def
/c 11 def
/d 12 def
/e 13 def
/f 14 def
/i 15 def
/j 16 def
/k 17 def
/n 18 def
/o 19 def
/p 20 def
/r 21 def
/t 22 def
/w 23 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1143 -767 1470 2133} readonly def
/UniqueID 4336582 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E64FFC30D571E77C48863E0C382D48172FCB38E84ECA7A74ECC0BD35F2B739747BF2E0C81FA09F302BA324E0F3510A93814D53B81AF9BBC998B8ADA2BC168720944E100B32D2998ABA88B1F2497AC4445ACB399F71F4B2AD5C23B8BDA7193839528EE33408A883A3B0C1A9F69A0E697EF6C2CC26584EC4690D2F066DB90BE195F9D92761A551C0EFB44A5A11CC8206E891E6938DBD7990C89C6B299BAADB030C87964F28F96F3CCB221447A42099A84C701A241C8828CC120B9D0C39D39E1D6085DF2277D5E1775635A682D783F927B336C9936E9BCF79AF2C565F36FA8A12C6FF4F720683C744471465EF93896033E955FFBB845862C06814423557D2DD804132C672EEA85055CA657DE549A0C04BA6A11A3394D8378812BFAFF8B22069AB4FCCC22184A976AFB7D2B6DDBEE9A6CC5932FAF28E0626CC434A030CD143B34E2A120FC03DF63E947AF5832336BFA9BA24DC222BDF3BE8A0EAC49BE5667982CFA2A88DEF0DBD21C834DC91B815A54798BBC5FFD2DA6CC8ECD1AE030C3D373C28EE9EAF9EBBD44AA9E52BCE7E50E10A142CED837B86127A360319458F5C55750819B9695AD922BA3A090564C6A4C027BE1204881584110510B81B7532E88E9EA4C2FABAF875A13DB6241E4371844658E037019A27913A0EFEEF83243AD7270F5B919DE06C6974681B0C26DCEA943EF2D1B50D92A8E6179E63DDEF61CB84B65F2538D71B14D88B9D96E2CA0554AB678B49E27DDD3724A2ECAE19B203D7E573D30CC2C4E207
39D9BE4FAAF796273E3EC20DBD3FEC86201E29D9876FFCC482382F1383EE08824D5833F371C6D96AFCF8323D19FDB441FF64DDC3396942BCB682DDBCE559C47D74F664EFF6C4521DA2E03EE3693FE36B6CB4C4DF5A7C24DB69B020025EF3008EB498D0EFBA1F770EA0D5483068BDAB6F1947AAA03851C2D669E03C81469051A294C94A915D24B90C5442DE9AAF90BEC86E12BDA9C4D3866A50353AD07E8860236B8C314AC9FA604A8A96D9A2B8D271BE6755E5BB7368E96DA2C0123B41A29D705232F3C90F89A85BAB8430610FE76DEFCB2A9E80E893B53427E73BF4F1048F7996276A8B6814067A31BBB32C5B7391162577BA46B3B04633A3606B1A61AC7B3F451078009793D1DDA35EE61841AF5B775DE3F4458620B371BCD81B96A2F71BD00D755C14CB06ACF493D4ABE041D811E9D29858EDEDBBF7A3743ECA29F47C38F42D78B676FC082B9ECBE14EB1824C83EBDE43171C6E6AD0255DC957821DAF457B40C3CBB84AE3E4B57C0C4E6243274F038E50B853C62BC35964428AB7F5BEAEA2D99D6D82276D2E2079C6073FBF6D598695B7A4005CC8579E29E12CD0F26675FC53DCADDA940F708F56A85AEB43873ECFAA050A264F2DEDB3499213A4BAC4CDF65D97147BAD636C6C7F9C6C27670F8AB52B1029CB2572FAAA24FF5C2C8C9B733DBAEE5C9EA2E03C6C148CF5BF9FE68D807936E25E8BD358F4255080FB3D1B2236AC513D726AF7EFFCAB2793E5BB239719FF6A14325A8D87DF22D6F37FCA794751D8F106DD769E784A8F44D35A470C4F6EF38952C9B65D51404388110636150C51A936A12800A8CEE6379A8D6F7AC0529C7452D570AD699D4129FC1B433AD8211473F03261650D7BF9F425347CB62A80516F3C21EE5BBAC5B63140516FE35F5C0B387AD96C2A6457D01C43340F3609C559891AE3F648DFD42677B19601F0174759B119F94F2C943225FC6B45C26361BFEF32CD98333A086DAF9A8CE4E75CADCA32F784F6996D39AACD7018A57F211A9BF38479B19B3720162859FF0302DB306DD04336526F04C074CAEF516AE2496049782F7FA7B7B12EA6D865A3C27B239D2042B5A383200E9295A60A251E952C88DAD2CD0D1C983549C81D241F01E50BFA2FCE17E317FC9A7E3052F783B1A4ACCF3B8340ABFED36622C8BAFBDFDE3848E5B1222301EBC8E01118B93117647B07123740855D768D9CE9D7706D2F5E9379E1BD9BE1AF84D53DFFF3D3F095EF14AF977F47393484688D6712098C9ECB5E51C16BE9B8FE212733606AEC55CC588EECDAA5B7494F475F7DB4F3D3AC73FED48EE3A10A5BC4DCEBD33E1729B225B007B917F322617BE2FDC005AEA6A7106EEBDABAA5FAA29AB7AFCBA64544DB2E9917BDCE4FCE295766D679B4A6FF59FCBC53731B89B69C4EC0F4AE5ECDCF8EC91318A35163C755E89BA6BDD680650880D0BB96FCFDEF
DE9139508FC3896A12E89DFF604D2F3D7FBA2BA3CC45A3D402BC2064EE90BD5A2B68EC6AA25547A34B562BAE2FD84F95051B14411990AEA4A5F08CAB906A6D0D3A1865D592DC333B557BC1B1A1B24AA80AC29C2AE5BC8ED571608DE213814F39DF0328087DD12F4ED37E47F85817237ECAF457181ADE587289DB901C5803E8FF31D63BED1F90497293D8E372F01814A1785416ADF2F088FDF3C58F89862623A8DE56D22DD4F5FD11FB27A073C0D2A159D3F893914CA581A1A2AC7DF6FA7C41A014A2BE796D2F7B14C86E7C932EC6CF48B7310DB46473F3760BE814D5B4907261B5A8C21718519842096EE847EEAA47EE24B850CB91BA56B76ADCC33537211571FE30B68583F9317AB93AEB91AC80BF25B7BF2CE377A4B19E1E046FF438A6949EE004EE9B7E97836AA95F915748E09DEB59041984A41C62579E20A310F383164A0521C4D6BD850CFD524694DDA2FBF9E8FBE6D38D071BF6A869D506252AE25611883CF25726D7E9F785556416E940FCC814EAD6B36A507AF9EA839AAA830A21284EBFF7979C9846ABD3B98FD699485A163186C72761C5FFFEA6D5861C5B3E2E4420A63F49D657F8842AFD39DABCE8325DDCB1FF8D35BBA787155FD79C5AC1C972D361C5FFE5D0AA942C6AB1FF5F1AEADDFF4C4C527E65AFA78FA3BF06E9358E11EFD3F597D11DC1071F37EE54C8381C963ECF60F05E1EA2B8B0C4A1D99B7D3B86C4B43DC641C78645305BBED4FB8D4EC2EC091931D9D611EAAD43815876BB58F935DEE795E15942590F37E2CA01727369BAF05D58DAD8D6EDC88B2A06C327DDE11C129DA5D9BE2787CF102315AF5E10CA43545DEDF644B45405FC07E7E7240228DF882EAB3F07C22253BAA98E1F605112B3014B1EA6B2E7D742E9ED3ADEC224561D4E456D0F1645C9942902770F04ECA7377B2A438E8DD369050C868B6E865D3FB19737A22D2E8E7AD22ABD44F8463C64F410C78BBDA9E42BF36DE41435157E38655E58A747BF459BDF97008FD18A93444EC92173F471D7ACCE2ECC8AB6DA21EC83E9C789309B9BDF3540E41403257921C3A46C096DEDE740361BF0CCFDBCF1295DB756AF812CC119FDA55BCA870D5FB7ECC5D05A701DAFD2B0775A6DDC7995F956B218E92ACAD601988C577DE8DC7DB85155C6C0F387A5FFD7DACC8B5051CC0309287D63DF1932DCE945CF6430DAFE7643A299B9F07491AB57F65C196F65BC6BC08CE5B6939297D5001BE19604E674A3B6099C02EA8D17527DE03967ABCF4F3CDFE0C68B65AAB07910FD931AF513BF0CC305689573B07AD88E1183CFCD4B018D3B67694B952B5501184E765EA00EDACFBC213CE10E53E419710EC197BC5B40ABD9C5DED9206E54774CC0494312CCB0E0D2D4009ED0240D7A9F76D653BAF85014D185686D1280B6E3DCCBF6DDB075E5716CF4954F85AC9F8427A7A9A98EADA7EE
5F549D7A09C706DF45A1578D44BA092901EE0F21AB862A082F3CAF342EF737DB1EE6F6FF90952CEB32FE704B5134994CFC1757F2E59B9A3C4D2F1F1CA2D04EE4C6EC6218834D4E02F68C2A6524BF8ACA9B680DC7062836E1FEF9E42F74F6056DF52F3F5E880BEEF6011DFA9671D5F3AC8EF47757D2A233B755E2B7FE685B2CBF1301033B817722F3F49BA116FDE8D75C09A751C40AD9F7953D08EAFB9E7897210FDC33FD84FCAEB49A9701ED28F0A82408521D5FDB08F06909A4253A3B323D0159BEC42AD56C176B2CC8BAF2973E5DDB8B384CCE71714C1E0CC8FB7731D241FA6B8EF7ADBA05A9931F377B0C6E68EA74172B4AEA43854B2D437A1A01E8301AEA425566D9AF33A28BB7B8BC9449AD7EA02532069977161DF6DBAE8A5F4B20DC3782115BD2FC7B8B7404F91111A699EC346F72D6EAE5603E4F90516CE95304ACD7F79E62B88653A33CC66749393BF16A4675A8D09B3AEC6D4757995887F7B3B207991633684835C7597AE6DB6AA7859F4A1E790C95920343E22FBB82B994B3696F1BA52EA096BD8762531D9EB3DD9BF9D35E6063103DE75EFEC868CDB92148D2530F36BEC301189A1472CB014C32F3C3D5350C4A6D123B538E362E847EFBD77091B514892F1D4E729BDF91227B0228BA0654EA95E8858F981D4F007C6FAE7ACD875B624E8BA7821774797C958DC7B2419757518C1F0995F5B588D26124C8C44A18500DFD171964EC42C66618812870EF36A03DADFF45D29BED43D6185E609C41B6031C94C360949B20C261A19E1E72E307E184F02D452A474D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/Menlo-Regular cguidfix
/F1.1/Menlo-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 474 341 rc
358 88.5 m
470 88.5 l
471.65686 88.5 473 87.156853 473 85.5 c
473 55.5 l
473 53.843147 471.65686 52.5 470 52.5 c
358 52.5 l
356.34314 52.5 355 53.843147 355 55.5 c
355 85.5 l
355 87.156853 356.34314 88.5 358 88.5 c
h
358 88.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2597.5 m
2745 2597.5 l
2746.6567 2597.5 2748 2598.8433 2748 2600.5 c
2748 2630.5 l
2748 2632.1567 2746.6567 2633.5 2745 2633.5 c
2633 2633.5 l
2631.3433 2633.5 2630 2632.1567 2630 2630.5 c
2630 2600.5 l
2630 2598.8433 2631.3433 2597.5 2633 2597.5 c
h
2633 2597.5 m
S
/Cs2 SC
0 sc
0 i
/F1.1[ 15 0 0 -15 0 0]sf
2643.8462 2620.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
358 124.5 m
470 124.5 l
471.65686 124.5 473 123.15685 473 121.5 c
473 91.5 l
473 89.843147 471.65686 88.5 470 88.5 c
358 88.5 l
356.34314 88.5 355 89.843147 355 91.5 c
355 121.5 l
355 123.15685 356.34314 124.5 358 124.5 c
h
358 124.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2561.5 m
2745 2561.5 l
2746.6567 2561.5 2748 2562.8433 2748 2564.5 c
2748 2594.5 l
2748 2596.1567 2746.6567 2597.5 2745 2597.5 c
2633 2597.5 l
2631.3433 2597.5 2630 2596.1567 2630 2594.5 c
2630 2564.5 l
2630 2562.8433 2631.3433 2561.5 2633 2561.5 c
h
2633 2561.5 m
S
/Cs2 SC
0 sc
0 i
2643.8462 2584.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
358 160.5 m
470 160.5 l
471.65686 160.5 473 159.15686 473 157.5 c
473 127.5 l
473 125.84315 471.65686 124.5 470 124.5 c
358 124.5 l
356.34314 124.5 355 125.84315 355 127.5 c
355 157.5 l
355 159.15686 356.34314 160.5 358 160.5 c
h
358 160.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2525.5 m
2745 2525.5 l
2746.6567 2525.5 2748 2526.8433 2748 2528.5 c
2748 2558.5 l
2748 2560.1567 2746.6567 2561.5 2745 2561.5 c
2633 2561.5 l
2631.3433 2561.5 2630 2560.1567 2630 2558.5 c
2630 2528.5 l
2630 2526.8433 2631.3433 2525.5 2633 2525.5 c
h
2633 2525.5 m
S
/Cs2 SC
0 sc
0 i
2643.8462 2548.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
358 196.5 m
470 196.5 l
471.65686 196.5 473 195.15686 473 193.5 c
473 163.5 l
473 161.84314 471.65686 160.5 470 160.5 c
358 160.5 l
356.34314 160.5 355 161.84314 355 163.5 c
355 193.5 l
355 195.15686 356.34314 196.5 358 196.5 c
h
358 196.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2489.5 m
2745 2489.5 l
2746.6567 2489.5 2748 2490.8433 2748 2492.5 c
2748 2522.5 l
2748 2524.1567 2746.6567 2525.5 2745 2525.5 c
2633 2525.5 l
2631.3433 2525.5 2630 2524.1567 2630 2522.5 c
2630 2492.5 l
2630 2490.8433 2631.3433 2489.5 2633 2489.5 c
h
2633 2489.5 m
S
/Cs2 SC
0 sc
0 i
2643.8462 2512.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
2643.8462 2676.5 m
(*+,-./&+%-)[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
77.041664 202 m
275.04166 202 l
275.04166 83 l
77.041664 83 l
h
77.041664 202 m
f
[
8
5
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2352.0417 2484 m
2550.0417 2484 l
2550.0417 2603 l
2352.0417 2603 l
h
2352.0417 2484 m
S
0 i
1 1 1 sc
CM
120.04166 160.5 m
232.04167 160.5 l
233.69852 160.5 235.04167 159.15686 235.04167 157.5 c
235.04167 127.5 l
235.04167 125.84315 233.69852 124.5 232.04167 124.5 c
120.04166 124.5 l
118.38481 124.5 117.04166 125.84315 117.04166 127.5 c
117.04166 157.5 l
117.04166 159.15686 118.38481 160.5 120.04166 160.5 c
h
120.04166 160.5 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2395.0417 2525.5 m
2507.0417 2525.5 l
2508.6985 2525.5 2510.0417 2526.8433 2510.0417 2528.5 c
2510.0417 2558.5 l
2510.0417 2560.1567 2508.6985 2561.5 2507.0417 2561.5 c
2395.0417 2561.5 l
2393.3848 2561.5 2392.0417 2560.1567 2392.0417 2558.5 c
2392.0417 2528.5 l
2392.0417 2526.8433 2393.3848 2525.5 2395.0417 2525.5 c
h
2395.0417 2525.5 m
S
/Cs2 SC
0 sc
0 i
2437.4956 2548.5 m
(+,,)[ 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
358 232.5 m
470 232.5 l
471.65686 232.5 473 231.15686 473 229.5 c
473 199.5 l
473 197.84314 471.65686 196.5 470 196.5 c
358 196.5 l
356.34314 196.5 355 197.84314 355 199.5 c
355 229.5 l
355 231.15686 356.34314 232.5 358 232.5 c
h
358 232.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2453.5 m
2745 2453.5 l
2746.6567 2453.5 2748 2454.8433 2748 2456.5 c
2748 2486.5 l
2748 2488.1567 2746.6567 2489.5 2745 2489.5 c
2633 2489.5 l
2631.3433 2489.5 2630 2488.1567 2630 2486.5 c
2630 2456.5 l
2630 2454.8433 2631.3433 2453.5 2633 2453.5 c
h
2633 2453.5 m
S
/Cs2 SC
0 sc
0 i
2643.8462 2476.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
358 268.5 m
470 268.5 l
471.65686 268.5 473 267.15686 473 265.5 c
473 235.5 l
473 233.84314 471.65686 232.5 470 232.5 c
358 232.5 l
356.34314 232.5 355 233.84314 355 235.5 c
355 265.5 l
355 267.15686 356.34314 268.5 358 268.5 c
h
358 268.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2417.5 m
2745 2417.5 l
2746.6567 2417.5 2748 2418.8433 2748 2420.5 c
2748 2450.5 l
2748 2452.1567 2746.6567 2453.5 2745 2453.5 c
2633 2453.5 l
2631.3433 2453.5 2630 2452.1567 2630 2450.5 c
2630 2420.5 l
2630 2418.8433 2631.3433 2417.5 2633 2417.5 c
h
2633 2417.5 m
S
/Cs2 SC
0 sc
0 i
2643.8462 2440.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
358 304.5 m
470 304.5 l
471.65686 304.5 473 303.15686 473 301.5 c
473 271.5 l
473 269.84314 471.65686 268.5 470 268.5 c
358 268.5 l
356.34314 268.5 355 269.84314 355 271.5 c
355 301.5 l
355 303.15686 356.34314 304.5 358 304.5 c
h
358 304.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2381.5 m
2745 2381.5 l
2746.6567 2381.5 2748 2382.8433 2748 2384.5 c
2748 2414.5 l
2748 2416.1567 2746.6567 2417.5 2745 2417.5 c
2633 2417.5 l
2631.3433 2417.5 2630 2416.1567 2630 2414.5 c
2630 2384.5 l
2630 2382.8433 2631.3433 2381.5 2633 2381.5 c
h
2633 2381.5 m
S
/Cs2 SC
0 sc
0 i
2643.8462 2404.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
358 340.5 m
470 340.5 l
471.65686 340.5 473 339.15686 473 337.5 c
473 307.5 l
473 305.84314 471.65686 304.5 470 304.5 c
358 304.5 l
356.34314 304.5 355 305.84314 355 307.5 c
355 337.5 l
355 339.15686 356.34314 340.5 358 340.5 c
h
358 340.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2275 2686 cm
2633 2345.5 m
2745 2345.5 l
2746.6567 2345.5 2748 2346.8433 2748 2348.5 c
2748 2378.5 l
2748 2380.1567 2746.6567 2381.5 2745 2381.5 c
2633 2381.5 l
2631.3433 2381.5 2630 2380.1567 2630 2378.5 c
2630 2348.5 l
2630 2346.8433 2631.3433 2345.5 2633 2345.5 c
h
2633 2345.5 m
S
/Cs2 SC
0 sc
0 i
2643.8462 2368.5 m
(!"#$%&'\($\))[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
2378.7957 2676.5 m
(0122$3.144./&+%-)[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
2280 2433.8333 m
(5,6&$.7+,,6$,)[ 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 9.030762 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
2349.8386 2442.8333 m
2376.8259 2476.7529 l
S
0 i
CM
106.80679 202.98682 m
104.17356 211.11493 l
99.478348 207.37929 l
h
106.80679 202.98682 m
f
0 J
0 j
1 0 0 -1 -2275 2686 cm
2381.8069 2483.0132 m
2379.1736 2474.885 l
2374.4783 2478.6206 l
h
2381.8069 2483.0132 m
S
ep
end
%%Trailer
%%EOF
